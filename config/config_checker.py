"""
------------------------------------
University of Michigan LoG(M) 2024WN Tops Team @Daniel Hou 2024/03/11

This is the config checker for the configuration of the tops program. 
This program checks the validity of a specific config.json file and reports whether it follows 

Example Usage: 
>>> python3

Primary Functions: 
  -- main(): checks whether the JSON configuration is legal according to README using helper functions. 

Parameters: 
  -- Optional: -f fileName: this specifies a JSON file that is not config.json in this directory. 

Depends on: 
  -- Python json, sys, argparse modules, all of which are built in to decently recent versions of Python. 

Generative AI Disclaimer: 
  -- This script uses content generated by ChatGPT. 
------------------------------------
"""
import json, sys, argparse, numbers

DEFAULT_JSON_PATH="./config.json"

LEGAL_MODES = ["single", "one-to-one", "grid"]
LEGAL_TOPS = ["euler", "lagrange", "kovalevskaya"]
LEGAL_ANIM_KERNELS = ["Tops", "TopEuler"]
LEGAL_SLIDING_OPTIONS = [True, False]


def check_json(filename: str) -> None:
  """
  Checks whether the json file can be successfully parsed. 
  - If so, print in an isolated line "JSON CHECK PASSED :)"
  - Otherwise, reflect the error.

  Input: 
    - filename: the file name of json file
  """
  try:
    with open(filename, 'r') as file:
      data = json.load(file)
    if check_content(data): 
      print("JSON CONFIG CHECK PASSED!")
  except Exception as e:
    print(f"Error: {e}")


def check_content(data) -> bool:

  # Check Mode
  exist_key("mode", data)
  is_legal_option(data["mode"], LEGAL_MODES)
  
  # Check Verbose
  exist_key("verbose", data)
  is_instance("verbose", data, bool)
  
  # Check Sim
  exist_key("sim", data)
  check_sim_config(data["mode"], data["sim"])

  # Check Animation
  exist_key("animation", data)
  check_anim_config(data["animation"])
  return True


def check_sim_config(mode, data) -> None:
  # Check tops
  exist_key("tops", data)
  is_instance("tops", data, list)
  is_nonempty(data["tops"])
  if mode == "one-to-one": numTops = len(data['tops'])
  
  # Check ang momentum
  exist_key("init_ang_momentum", data)
  is_instance("init_ang_momentum", data, list)
  is_nonempty(data["init_ang_momentum"])
  if mode == "one-to-one": isNx3(data["init_ang_momentum"], numTops)

  # Check angular velocity
  exist_key("init_ang_velocity", data)
  is_instance("init_ang_velocity", data, list)
  is_nonempty(data["init_ang_velocity"])
  if mode == "one-to-one": isNx3(data["init_ang_velocity"], numTops)

  # Check initial heading
  exist_key("init_heading", data)
  is_instance("init_heading", data, list)
  is_nonempty(data["init_heading"])
  if mode == "one-to-one": isNx3(data["init_heading"], numTops)



def check_anim_config(data) -> None:
    # Check Animation Kernels
    exist_key("kernel", data)
    is_legal_option(data["kernel"], LEGAL_ANIM_KERNELS)

    if data["kernel"] == "Tops":  # Additional checks if kernel is not "TopEuler"
        # Check show_energy
        exist_key("sliding_window", data)
        is_legal_option(data["show_energy"], LEGAL_SLIDING_OPTIONS)


"""
Helper Functions
"""
def exist_key(key, data: dict) -> None:
  if key not in data.keys():
    raise KeyError("[Config Checker] Missing Required Config Entry: " + key + "!")

def is_legal_option(option, legal_options) -> None:
  if option not in legal_options:
    raise ValueError("[Config Checker] Invalid Option: "+option)

def is_instance(key, data, dtype) -> None:
  if not isinstance(data[key], dtype):
    raise KeyError("[Config Checker] Wrong type for entry " + key + "!")
  
def is_nonempty(data) -> None:
  assert(isinstance(data, list))
  if len(data) == 0:
    raise ValueError("[Config Checker] Invalid empty data exists!")
  
def isNx3(data, n=0) -> None:
  if n != 0 and len(data) != n:
    raise ValueError("[Config Checker] Mismatched option lengths!")
  for entry in data:
    if len(entry) != 3:
      raise ValueError("[Config Checker] Invalid Length of " + len(entry) + " for option " + entry)
    for val in entry:
      if not isinstance(val, numbers.Number):
        raise ValueError("[Config Checker] Invalid non-numeric option " + val + "in" + entry)

def main() -> None:
  """
  Parses command and uses check_json to check command and do nothing else. 

  Commandline Options:
  - `-f` followed by a file name, optional argument, enforced file name
    - if this flag is used, check this file. Otherwise, use DEFAULT_JSON_PATH
  """
  parser = argparse.ArgumentParser(description="Check JSON file format.")
  parser.add_argument('-f', '--file', type=str, help="File name to check.", default=DEFAULT_JSON_PATH)
  args = parser.parse_args()

  check_json(args.file)

if __name__ == "__main__":
  main()